---

# Role will read the metadata file, which is acquired via other means, including:
# - Retrieved via get_url directly
# - Loaded from a cloned repo
# - Loaded from a WIP local directory
# 
# For the latter two, the role can upload the contents of the directory to the
# newly created Project, if needed, which will help in AMP development

- name: Read the AMP metadata file
  tags: always
  ansible.builtin.include_vars:
    name: amp
    file: "{{ amp_metadata_file }}"

- name: Set up the AMP project
  tags: always
  cloudera.runtime.ml_project:
    endpoint: "{{ amp_endpoint }}"
    api_key: "{{ amp_api_key }}"
    name: "{{ amp_project_name | default(amp.name) }}"
    desc: "{{ amp_project_desc | default(amp.description) }}"
    runtime: ml_runtime
    template: git
    visibility: "{{ amp_project_visibility | default('private') }}"
    git: "{{ amp_git_url }}" # Currently... will enable upload option later
    env: "{{ metadata_env | combine(role_env) }}"
  vars:
    metadata_env: "{{ dict((amp.environment_variables | dict2items | map(attribute='key')) | zip(amp.environment_variables | dict2items | map(attribute='value') | map(attribute='default') | map('string'))) }}"
    role_env: "{{ dict((amp_project_env_vars | dict2items | map(attribute='key')) | zip(amp_project_env_vars | dict2items | map(attribute='value') | map('string'))) }}"
  register: __amp_project

- name: Confirm readiness of the AMP project
  tags: always
  retries: 60
  delay: 10
  until: __amp_project_monitor.projects[0].creation_status == "success"
  cloudera.runtime.ml_project_info:
    endpoint: "{{ amp_endpoint }}"
    api_key: "{{ amp_api_key }}"
    id: "{{ __amp_project.project.id }}"
  register: __amp_project_monitor

- name: Retrieve AMP project runtime identitiers
  tags: always
  block:
    - name: Query to get a list of the runtimes
      cloudera.runtime.ml_runtimes_info:
        endpoint: "{{ amp_endpoint }}"
        api_key: "{{ amp_api_key }}"
        editor: "{{ runtime.editor | default(omit) }}"
        kernel: "{{ runtime.kernel | default(omit) }}"
        edition: "{{ runtime.edition | default(omit) }}"
      loop: "{{ amp.runtimes }}"
      loop_control:
        loop_var: runtime
      register: __amp_runtimes

    - name: Register the required runtime image to use
      ansible.builtin.set_fact:
        __amp_runtime_image_identifier: "{{ (__amp_runtimes.results[0].runtimes | selectattr('editor', 'in', (amp.runtimes | map(attribute='editor'))) | map(attribute='image_identifier') | first) | default(omit) }}"

- name: Set up AMP entities
  tags: always
  ansible.builtin.set_fact:
    amp_entities: {}

- name: Execute the AMP project tasks
  tags: always
  ansible.builtin.include_tasks:
    file: "{{ step.type }}.yml"
  loop: "{{ amp.tasks }}"
  loop_control:
    loop_var: step
    label: "{{ step.name | default(step.type) }} ({{ step.entity_label | default('') }})"
